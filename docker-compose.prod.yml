version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: projectmanagement_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-projectmanagement}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network
    # Không expose port ra ngoài trong production

  redis:
    image: redis:7-alpine
    container_name: projectmanagement_redis_prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ASPNETCORE_ENVIRONMENT=Production
    container_name: projectmanagement_backend_prod
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__Redis=redis:6379,password=${REDIS_PASSWORD}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-TrelloCloneApi}
      - Jwt__Audience=${JWT_AUDIENCE:-TrelloCloneClient}
      - ClientUrl=${CLIENT_URL}
      - Unsplash__AccessKey=${UNSPLASH_ACCESS_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/wwwroot/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app_network

  frontend:
    build:
      context: ./src/Web/frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=/api
        - VITE_SIGNALR_HUB_URL=/hubs/board
    container_name: projectmanagement_frontend_prod
    restart: always
    depends_on:
      - backend
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: projectmanagement_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge