services:
  postgres:
    image: postgres:15-alpine
    container_name: projectmanagement_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: projectmanagement_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: projectmanagement_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: projectmanagement_backend
    restart: unless-stopped
    ports:
      - "5000:80"
      - "5001:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=projectmanagement_dev;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__Key=YourSuperSecretKeyThatIsAtLeast32CharactersLong!@#$$%^&*()
      - Jwt__Issuer=TrelloCloneApi
      - Jwt__Audience=TrelloCloneClient
      - ClientUrl=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src/Web/wwwroot/uploads:/app/wwwroot/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  frontend:
    build:
      context: ./src/Web/frontend
      dockerfile: Dockerfile
    container_name: projectmanagement_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy    
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge